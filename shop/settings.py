"""
Django settings for shop project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import environ
import os
from django.urls import reverse_lazy

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

DEBUG = os.getenv("DEBUG", "True") == "True"

ALLOWED_HOSTS = ['y-e-e.tech', 'www.y-e-e.tech', '.herokuapp.com']

# Logger Heroku pour les erreurs
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'DEBUG',
    },
}

# Initialize environment variables
env = environ.Env(
    # set casting, default value
    DEBUG=(bool, False)
)

# Take environment variables from .env file
environ.Env.read_env(os.path.join(BASE_DIR, ".env"))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env(
    "SECRET_KEY",
    default="django-insecure-700b0dty#mmk7ku51nmsg1rbt1jy^*^4^nymmo3pg@5+c#ap&g",
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env("DEBUG")

ALLOWED_HOSTS = env.list("ALLOWED_HOSTS", default=["*"])

# CSRF Trusted Origins for HTTPS (required for ngrok and external domains)
CSRF_TRUSTED_ORIGINS = env.list(
    "CSRF_TRUSTED_ORIGINS",
    default=[
        "https://*.ngrok-free.app",
        "https://*.ngrok.app",
        "https://*.ngrok.io",
        "http://localhost:8080",
        "http://127.0.0.1:8080",
        "http://0.0.0.0:8080",
        "http://localhost:8000",
        "http://127.0.0.1:8000",
        "http://0.0.0.0:8000",
        "http://192.168.1.26:8000",  # IP locale pour iPhone
        "https://d4fe2da5a95b.ngrok-free.app/",
        # Domaine de production
        "https://www.y-e-e.codes",
        # URL temporaire DigitalOcean App Platform
        "https://*.ondigitalocean.app",
    ],
)


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # OTP applications
    "django_otp",
    "django_otp.plugins.otp_totp",
    "django_otp.plugins.otp_static",
    # Custom apps
    "store",  # Custom app for the shop
    "accounts",  # Custom app for user accounts
    "pages",  # Custom app for static pages
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",  # Pour servir les fichiers statiques
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django_otp.middleware.OTPMiddleware",  # OTP middleware
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "shop.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "store.context_processors.global_categories",
                "store.context_processors.cart_info",
            ],
        },
    },
]

WSGI_APPLICATION = "shop.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

import dj_database_url

# Configuration pour App Platform Digital Ocean
database_url = env("DATABASE_URL", default=None)

DATABASES = {
    'default': dj_database_url.config(conn_max_age=600, ssl_require=True)
}

if database_url and database_url.startswith(('postgres://', 'postgresql://')):
    # Configuration automatique via DATABASE_URL (App Platform)
    DATABASES = {
        'default': dj_database_url.parse(
            database_url,
            conn_max_age=600,
            conn_health_checks=True,
        )
    }
elif database_url and ("sqlite" in database_url or database_url == "sqlite:///:memory:"):
    # Check if DATABASE_URL is set (for CI/testing with SQLite)
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": ":memory:" if database_url == "sqlite:///:memory:" else BASE_DIR / "db.sqlite3",
        }
    }
else:
    # Configuration de base de données basée sur DB_ENGINE
    db_engine = env("DB_ENGINE", default="mysql")

    if db_engine == "postgresql":
        # Configuration PostgreSQL pour production
        DATABASES = {
            "default": {
                "ENGINE": "django.db.backends.postgresql",
                "NAME": env("DB_NAME", default="ecommerce_prod"),
                "USER": env("DB_USER", default="ecommerce_user"),
                "PASSWORD": env("DB_PASSWORD", default=""),
                "HOST": env("DB_HOST", default="localhost"),
                "PORT": env("DB_PORT", default="5432"),
                "OPTIONS": {
                    "connect_timeout": 60,
                },
            }
        }
    else:
        # Configuration MySQL/SQLite pour développement/build
        # Utiliser SQLite par défaut pour les builds sans DB configurée
        if not env("DB_NAME", default=""):
            DATABASES = {
                "default": {
                    "ENGINE": "django.db.backends.sqlite3",
                    "NAME": BASE_DIR / "db.sqlite3",
                }
            }
        else:
            DATABASES = {
                "default": {
                    "ENGINE": "django.db.backends.mysql",
                    "NAME": env("DB_NAME"),
                    "USER": env("DB_USER"),
                    "PASSWORD": env("DB_PASSWORD"),
                    "HOST": env("DB_HOST", default="localhost"),
                    "PORT": env("DB_PORT", default="3306"),
                    "OPTIONS": {
                        "charset": "utf8mb4",
                        "init_command": "SET sql_mode='STRICT_TRANS_TABLES'",
                    },
                }
            }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "fr-FR"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / "staticfiles"
STATICFILES_DIRS = [
    BASE_DIR / "static",
]

# Configuration WhiteNoise ajustée pour préserver vos styles
STATICFILES_STORAGE = "django.contrib.staticfiles.storage.StaticFilesStorage"
WHITENOISE_USE_FINDERS = True
WHITENOISE_AUTOREFRESH = True
WHITENOISE_SKIP_COMPRESS_EXTENSIONS = ['css', 'js']


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"
AUTH_USER_MODEL = "accounts.Shopper"  # Use the custom user model

# Authentication backends
AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
    "accounts.firebase_auth.FirebaseAuthenticationBackend",
]

# Configuration de l'interface admin
ADMIN_SITE_HEADER = "YEE E-Commerce - Administration"
ADMIN_SITE_TITLE = "YEE Admin"
ADMIN_INDEX_TITLE = "Tableau de bord administrateur"

# =============================================================================
# PAYMENT SYSTEM CONFIGURATION
# =============================================================================

# Stripe Configuration
STRIPE_PUBLISHABLE_KEY = env("STRIPE_PUBLISHABLE_KEY", default="pk_test_default")
STRIPE_SECRET_KEY = env("STRIPE_SECRET_KEY", default="sk_test_default")
STRIPE_WEBHOOK_SECRET = env("STRIPE_WEBHOOK_SECRET", default="whsec_default")

# PayPal Configuration
PAYPAL_MODE = env("PAYPAL_MODE", default="sandbox")  # 'sandbox' or 'live'
PAYPAL_CLIENT_ID = env("PAYPAL_CLIENT_ID", default="paypal_client_id_default")
PAYPAL_CLIENT_SECRET = env("PAYPAL_CLIENT_SECRET", default="paypal_secret_default")

# Payment Settings
PAYMENT_HOST_URL = env("PAYMENT_HOST_URL", default="http://localhost:8000")
PAYMENT_SUCCESS_URL = reverse_lazy("accounts:payment_success")
PAYMENT_CANCEL_URL = PAYMENT_HOST_URL + "/accounts/payment/cancelled/"

# Security for payment processing
PAYMENT_ENCRYPTION_KEY = env("PAYMENT_ENCRYPTION_KEY", default="default-key-change-me")

# =============================================================================
# EMAIL CONFIGURATION
# =============================================================================
EMAIL_BACKEND = env(
    "EMAIL_BACKEND", default="django.core.mail.backends.console.EmailBackend"
)
EMAIL_HOST = env("EMAIL_HOST", default="smtp.gmail.com")
EMAIL_PORT = env.int("EMAIL_PORT", default=587)
EMAIL_USE_TLS = env.bool("EMAIL_USE_TLS", default=True)
EMAIL_HOST_USER = env("EMAIL_HOST_USER", default="")
EMAIL_HOST_PASSWORD = env("EMAIL_HOST_PASSWORD", default="")

# =============================================================================
# FIREBASE CONFIGURATION
# =============================================================================
FIREBASE_API_KEY = env("FIREBASE_API_KEY", default="")
FIREBASE_AUTH_DOMAIN = env("FIREBASE_AUTH_DOMAIN", default="")
FIREBASE_PROJECT_ID = env("FIREBASE_PROJECT_ID", default="")
FIREBASE_STORAGE_BUCKET = env("FIREBASE_STORAGE_BUCKET", default="")
FIREBASE_MESSAGING_SENDER_ID = env("FIREBASE_MESSAGING_SENDER_ID", default="")
FIREBASE_APP_ID = env("FIREBASE_APP_ID", default="")

# Firebase Admin SDK Configuration
FIREBASE_CREDENTIALS_PATH = env("FIREBASE_CREDENTIALS_PATH", default="firebase-credentials.json")
FIREBASE_DATABASE_URL = env("FIREBASE_DATABASE_URL", default="")

# Configuration complète pour les templates frontend
FIREBASE_CONFIG = {
    'apiKey': FIREBASE_API_KEY,
    'authDomain': FIREBASE_AUTH_DOMAIN,
    'projectId': FIREBASE_PROJECT_ID,
    'storageBucket': FIREBASE_STORAGE_BUCKET,
    'messagingSenderId': FIREBASE_MESSAGING_SENDER_ID,
    'appId': FIREBASE_APP_ID,
    'databaseURL': FIREBASE_DATABASE_URL,
}

# Chemin absolu vers le fichier de credentials
if FIREBASE_CREDENTIALS_PATH and not os.path.isabs(FIREBASE_CREDENTIALS_PATH):
    FIREBASE_CREDENTIALS_PATH = os.path.join(BASE_DIR, FIREBASE_CREDENTIALS_PATH)

# =============================================================================
# LOGGING CONFIGURATION
# =============================================================================
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {process:d} {thread:d} {message}",
            "style": "{",
        },
        "simple": {
            "format": "{levelname} {message}",
            "style": "{",
        },
    },
    "handlers": {
        "file": {
            "level": "INFO",
            "class": "logging.FileHandler",
            "filename": BASE_DIR / "payment.log",
            "formatter": "verbose",
        },
        "console": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
            "formatter": "simple",
        },
        "firebase_file": {
            "level": "DEBUG",
            "class": "logging.FileHandler",
            "filename": BASE_DIR / "firebase.log",
            "formatter": "verbose",
        },
    },
    "loggers": {
        "payment": {
            "handlers": ["file", "console"],
            "level": env("LOG_LEVEL", default="INFO"),
            "propagate": True,
        },
        "accounts.firebase_auth": {
            "handlers": ["firebase_file", "console"],
            "level": "DEBUG",
            "propagate": False,
        },
        "shop.firebase_config": {
            "handlers": ["firebase_file", "console"],
            "level": "DEBUG",
            "propagate": False,
        },
    },
}
