"""
üöÄ COMMANDE DE TEST POUR LE SYST√àME DE NOTIFICATIONS
==================================================

Cette commande teste tous les aspects du syst√®me de notifications.
Usage: python manage.py test_notification_system
"""

from django.core.management.base import BaseCommand
from django.contrib.auth import get_user_model
from accounts.email_services import EmailService
from accounts.models import Shopper
from django.conf import settings
import logging

logger = logging.getLogger(__name__)
User = get_user_model()


class Command(BaseCommand):
    help = 'Teste le syst√®me de notifications complet'

    def add_arguments(self, parser):
        parser.add_argument(
            '--email',
            type=str,
            help='Email de test pour recevoir les notifications'
        )
        parser.add_argument(
            '--skip-emails',
            action='store_true',
            help='Tester sans envoyer r√©ellement les emails'
        )

    def handle(self, *args, **options):
        test_email = options.get('email')
        skip_emails = options.get('skip_emails', False)

        self.stdout.write(
            self.style.SUCCESS("üß™ D√âMARRAGE DES TESTS DU SYST√àME DE NOTIFICATIONS")
        )

        # Test 1: Configuration email
        self.test_email_configuration()

        # Test 2: Service d'email
        self.test_email_service(test_email, skip_emails)

        # Test 3: Templates
        self.test_email_templates()

        # Test 4: Base de donn√©es
        self.test_database_integration()

        # Test 5: Commande newsletter
        self.test_newsletter_command()

        self.stdout.write(
            self.style.SUCCESS("‚úÖ TOUS LES TESTS SONT TERMIN√âS !")
        )

    def test_email_configuration(self):
        """Teste la configuration email"""
        self.stdout.write("üìß Test de la configuration email...")

        required_settings = [
            'EMAIL_BACKEND',
            'EMAIL_HOST',
            'EMAIL_PORT',
            'DEFAULT_FROM_EMAIL'
        ]

        missing_settings = []
        for setting in required_settings:
            if not hasattr(settings, setting):
                missing_settings.append(setting)

        if missing_settings:
            self.stdout.write(
                self.style.WARNING(f"‚ö†Ô∏è  Param√®tres manquants: {missing_settings}")
            )
        else:
            self.stdout.write(self.style.SUCCESS("‚úÖ Configuration email OK"))

        # Affichage de la configuration actuelle
        self.stdout.write(f"   Backend: {getattr(settings, 'EMAIL_BACKEND', 'Non configur√©')}")
        self.stdout.write(f"   Host: {getattr(settings, 'EMAIL_HOST', 'Non configur√©')}")
        self.stdout.write(f"   From: {getattr(settings, 'DEFAULT_FROM_EMAIL', 'Non configur√©')}")

    def test_email_service(self, test_email=None, skip_emails=False):
        """Teste le service d'email"""
        self.stdout.write("üîß Test du service EmailService...")

        # V√©rifier que la classe existe
        try:
            from accounts.email_services import EmailService
            self.stdout.write(self.style.SUCCESS("‚úÖ EmailService import√©"))
        except ImportError as e:
            self.stdout.write(self.style.ERROR(f"‚ùå Erreur import EmailService: {e}"))
            return

        # V√©rifier les m√©thodes
        required_methods = [
            'send_order_confirmation',
            'send_order_status_update',
            'send_newsletter',
            'send_welcome_email'
        ]

        for method in required_methods:
            if hasattr(EmailService, method):
                self.stdout.write(f"   ‚úÖ M√©thode {method} disponible")
            else:
                self.stdout.write(f"   ‚ùå M√©thode {method} manquante")

        # Test d'envoi si email fourni
        if test_email and not skip_emails:
            self.stdout.write(f"üì§ Test d'envoi d'email vers {test_email}...")
            try:
                # Cr√©er un utilisateur de test temporaire
                test_user = User(
                    username='test_notifications',
                    email=test_email,
                    first_name='Test',
                    last_name='User'
                )

                # Tester l'email de bienvenue
                result = EmailService.send_welcome_email(test_user)

                if result:
                    self.stdout.write(self.style.SUCCESS("‚úÖ Email de test envoy√© !"))
                else:
                    self.stdout.write(self.style.WARNING("‚ö†Ô∏è  Email non envoy√© (pr√©f√©rences?)"))

            except Exception as e:
                self.stdout.write(self.style.ERROR(f"‚ùå Erreur envoi test: {e}"))

    def test_email_templates(self):
        """Teste l'existence des templates d'email"""
        self.stdout.write("üìÑ Test des templates d'email...")

        from django.template.loader import get_template
        from django.template import TemplateDoesNotExist

        templates = [
            'emails/order_confirmation.html',
            'emails/order_status_update.html',
            'emails/newsletter.html',
            'emails/welcome.html'
        ]

        for template_name in templates:
            try:
                template = get_template(template_name)
                self.stdout.write(f"   ‚úÖ Template {template_name} trouv√©")
            except TemplateDoesNotExist:
                self.stdout.write(f"   ‚ùå Template {template_name} manquant")

    def test_database_integration(self):
        """Teste l'int√©gration avec la base de donn√©es"""
        self.stdout.write("üóÑÔ∏è  Test de l'int√©gration base de donn√©es...")

        # Test du mod√®le Shopper
        try:
            total_users = Shopper.objects.count()
            newsletter_subscribers = Shopper.objects.filter(
                newsletter_subscription=True,
                email_notifications=True
            ).count()

            self.stdout.write(f"   ‚úÖ Utilisateurs total: {total_users}")
            self.stdout.write(f"   ‚úÖ Abonn√©s newsletter: {newsletter_subscribers}")

            # V√©rifier les champs n√©cessaires
            required_fields = ['email_notifications', 'newsletter_subscription']
            sample_user = Shopper.objects.first()

            if sample_user:
                for field in required_fields:
                    if hasattr(sample_user, field):
                        self.stdout.write(f"   ‚úÖ Champ {field} disponible")
                    else:
                        self.stdout.write(f"   ‚ùå Champ {field} manquant")

        except Exception as e:
            self.stdout.write(self.style.ERROR(f"‚ùå Erreur base de donn√©es: {e}"))

    def test_newsletter_command(self):
        """Teste la commande newsletter"""
        self.stdout.write("üì∞ Test de la commande newsletter...")

        try:
            from django.core.management import call_command
            from io import StringIO

            # Test en mode aper√ßu
            out = StringIO()
            call_command(
                'send_newsletter',
                'Test Newsletter',
                '<h1>Contenu de test</h1>',
                '--preview',
                stdout=out
            )

            output = out.getvalue()
            if 'APER√áU' in output:
                self.stdout.write("   ‚úÖ Commande newsletter fonctionne (mode aper√ßu)")
            else:
                self.stdout.write("   ‚ö†Ô∏è  Sortie commande inattendue")

        except Exception as e:
            self.stdout.write(f"   ‚ùå Erreur commande newsletter: {e}")

    def create_sample_data(self):
        """Cr√©e des donn√©es de test si n√©cessaire"""
        self.stdout.write("üîß Cr√©ation de donn√©es de test...")

        # Cr√©er un utilisateur de test s'il n'existe pas
        test_user, created = Shopper.objects.get_or_create(
            username='test_newsletter',
            defaults={
                'email': 'test@exemple.com',
                'first_name': 'Test',
                'last_name': 'Newsletter',
                'newsletter_subscription': True,
                'email_notifications': True
            }
        )

        if created:
            self.stdout.write("   ‚úÖ Utilisateur de test cr√©√©")
        else:
            self.stdout.write("   ‚ÑπÔ∏è  Utilisateur de test existe d√©j√†")

        return test_user
